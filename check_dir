#!perl

# RCS information (required by Perl::Critic)
# enable substitution with:
#   $ svn propset svn:keywords "Id Revision HeadURL Source Date"
#
#   $Id$
#   $Revision$
#   $HeadURL$
#   $Date$

use strict;
use warnings;

use 5.008;

use Getopt::Long;
use Carp;
use English qw(-no_match_vars);

use Nagios::Plugin;
use Nagios::Plugin::Threshold;
use File::stat;
use Pod::Usage qw(pod2usage);

use version; our $VERSION = '2.0.0';

# IMPORTANT: Nagios plugins could be executed using embedded perl in this case
#            the main routine would be executed as a subroutine and all the
#            declared subroutines would therefore be inner subroutines
#            This will cause all the global lexical variables not to stay shared
#            in the subroutines!
#
# All variables are therefore declared as package variables...
#
use vars qw(
  $critical
  $help
  $n
  $plugin
  $prog_name
  $recursive
  $result
  $status
  $info_string
  $threshold
  $verbosity
  $warning
  @dirnames
);

# initialization
$plugin      = Nagios::Plugin->new(
    shortname => $prog_name
);
$prog_name   = 'LM_SENSORS';
$verbosity   = 0;
$status      = 0;

##############################################################################
# subroutines

##############################################################################
# Usage     : max($i, $j)
# Purpose   : returns the maximum of two integers
# Returns   : the maximum of two integers
# Arguments : the integers to compare
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub max {

    my ($i, $j) = @_;

    if ($i > $j) {
        return $i;
    }
    else {
        return $j;
    }
    
}

##############################################################################
# Usage     : verbose("some message string", $optional_verbosity_level);
# Purpose   : write a message if the verbosity level is high enough
# Returns   : n/a
# Arguments : message : message string
#             level   : options verbosity level
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub verbose {

    # arguments
    my $message   = shift;
    my $level     = shift;

    if ( !defined $message) {
        $plugin->nagios_exit(UNKNOWN, q{Internal error: not enough parameters for 'verbose'});
    }
    
    if ( !defined $level ) {
        $level = 0;
    }

    if ( $level < $verbosity ) {
        print $message;
    }

    return;

}

##############################################################################
# Usage     : check_dir("directory_name")
# Purpose   : checks the number of files in the given directory
# Returns   : n/a
# Arguments : dirname: the name of the directory to check
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub check_dir {

    my $dirname = shift;
    my $info;
    my @files;
    my $DIR;

    ###############################
    # check if the directory exists

    if ( !-d $dirname ) {
        $plugin->nagios_exit( UNKNOWN, "Folder $dirname does not exist." );
    }

    ####################################
    # check if the directory is readable

    $info = stat $dirname
      or $plugin->nagios_exit( UNKNOWN, "Can't read stat for $dirname: $OS_ERROR" );

    if ( !( ( $info->mode & oct 5 ) || ( $info->uid == $REAL_USER_ID ) ) ) {
        verbose "skipping $dirname: Permission denied\n";
        return;
    }

    #######################
    # get directory listing

    verbose "Opening $dirname\n", 1;
    
    opendir $DIR, $dirname or
        $plugin->nagios_exit( UNKNOWN, "Can't open $dirname: $OS_ERROR");

    @files = readdir $DIR;
    @files = sort grep { !/^\./mx } @files ;

    closedir $DIR
        or $plugin->nagios_exit( UNKNOWN, "Error closing $dirname: $OS_ERROR" );

    $n = @files;

    #################
    # Additional info
    verbose "Directory '$dirname' has $n files\n";

    #################
    # Output (status)

    $plugin->add_perfdata(
        label     => $dirname,
        value     => $n,
        uom       => q{},
        threshold => $threshold,
    );

    if ( defined $info_string ) {
        $info_string = "$info_string, $dirname=$n";
    }
    else {
        $info_string = "$dirname=$n";
    }

    $status = max($status, $plugin->check_threshold($n));

    ###########
    # Recursive
    if ($recursive) {
        foreach my $file (@files) {
            if ( -d "$dirname/$file" ) {
                check_dir("$dirname/$file");
            }
        }
    }

    return;
}

##############################################################################
# main

########################
# Command line arguments

$result = GetOptions(
    'dir=s'      => \@dirnames,
    'critical=i' => \$critical,
    'warining=i' => \$warning,
    'help'       => \$help,
    'recursive'  => \$recursive,
    'verbose|v+' => \$verbosity,
    'version'    => sub { print "check_dir version $VERSION\n"; exit 3; }
);

#############################
# Sanity checks: command line

if ( !$result ) {
    pod2usage();
}

if ( $help )          { pod2usage(); }
if ( !defined $critical || $critical <= 0 ) {
    pod2usage( -message => 'Could not parse "critical"');
}
if ( !defined $critical || $warning  <= 0 ) {
    pod2usage( -message => 'Could not parse "warning"');
}
if ( $critical < $warning ) {
    pod2usage( -message => '"critical" has to be greater than "warning"');
}

$threshold = Nagios::Plugin::Threshold->set_thresholds(
    warning  => $warning,
    critical => $critical,
);

##########################
# Sanity checks: directory

foreach my $dirname (@dirnames) {
    if (! -d $dirname) {
        $plugin->nagios_exit(UNKNOWN, "Error: $dirname is not a directory");
    }
    if (! -r $dirname) {
        $plugin->nagios_exit(UNKNOWN, "Error: $dirname is not readable");
    }
    if (! -x $dirname) {
        $plugin->nagios_exit(UNKNOWN, "Error: $dirname is not executable");
    }
}

#############
# Process dir

foreach my $dirname (@dirnames) {
    check_dir($dirname);
}

$plugin->nagios_exit( $status, $info_string );

1;

__END__

=pod

=head1 NAME

C<check_dir> - a Nagios plugin to monitor the number of files in one or
more directories.

=head1 DESCRIPTION

check_dir is a Nagios plugin to monitor the number of files in one or
more directories.

=head1 VERSION

Version 2.0.0

=head1 SYNOPSIS

 check_dir  --dir=dirname --critical=critical --warning=warning
            [--recursive] [--verbose]
            [--version|--help]

 Options:
  -d dirname   specify directory
  -r           perform recursive traversal
  -c crit      specify the critical number of files
  -w warn      specify warning threshold for the number of files
  --version    print version number
  -v           be more verbose

=head1 REQUIRED ARGUMENTS

--dir, --critical and --warning

=head1 OPTIONS

    --dir,-d            directory to check

    --critical,-c       critical number of files

    --warning,-w        warning level (number of files)

    --help,-h,-?        this help screen

    --recursive,-r      include subdirectories
    
    --verbose,-v       increase verbosity

    --version,-V       prints version information

=head1 EXAMPLE

check_dir --dir=/tmp --dir=/var/tmp --critical=1000 --warning=800

check_dir will check if both the /tmp and /var/tmp have less than 800,
respectively 1000 files

=head1 DIAGNOSTICS

You can specify multiple --verbose options to increase the program
verbosity.

=head1 EXIT STATUS

0 if OK, 1 in case of a warning, 2 in case of a critical status and 3
in case of an unkown problem

=head1 DEPENDENCIES

dprofpp_grapher depends on

=over 4

=item * Carp

=item * English

=item * File::stat

=item * Getopt::Long

=item * Nagios::Plugin

=item * Nagios::Plugin::Threshold

=item * version

=back

=head1 CONFIGURATION

=head1 INCOMPATIBILITIES

None reported.

=head1 SEE ALSO

Nagios documentation

=head1 BUGS AND LIMITATIONS

No bugs have been reported.

Please report any bugs or feature requests to matteo.corti@id.ethz.ch,
or through the web interface at
https://svn.id.ethz.ch/trac/bd_webhosting/newticket

=head1 AUTHOR

Matteo Corti <matteo.corti@id.ethz.ch>

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2007, ETH Zurich.

This module is free software; you can redistribute it and/or modify it
under the terms of GNU general public license (gpl) version 3.
See the LICENSE file for details.

=head1 DISCLAIMER OF WARRANTY

BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT
WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
PARTIES PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND,
EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
SOFTWARE IS WITH YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME
THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE LIABLE
TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
DAMAGES.

=head1 ACKNOWLEDGMENTS

